#define MakeStack_cxx
#include "Headers/MC_Analysis.h"

void AddStack(TString c_name, TString get_hist, TString files[]) {
	TCanvas *c = new TCanvas(c_name);
	THStack *hs = new THStack(c_name+"_stack","");
	auto legend = new TLegend(0.75,0.8,0.99,0.99);
	
	int file_length = files->Length();
	for (UInt_t i=0;i<file_length;i++){
		TFile* file = new TFile("OutputFiles/"+files[i]+".root");
		TH1F* h = (TH1F*)file->Get(get_hist);
		h->SetFillColorAlpha(i+2,0.35);
		//h->SetFillStyle(3003);
		hs->Add(h);
		legend->AddEntry(h,files[i],"f");
	
	hs->Draw();
	hs->GetXaxis()->SetTitle(get_hist);
	hs->GetYaxis()->SetTitle("Counts");
	gPad->Modified();
	gPad->Update();	
	
	legend->SetHeader(get_hist,"C"); // option "C" allows to center the header
	legend->SetTextSize(0.02);
	legend->Draw();
	}
	
	TFile outfile("OutputFiles/StackedHists.root","RECREATE");
	c->Write();
	outfile.Close();
}


void MakeStack() {
	cout << "Making stacks..." << endl;
	
	TString files[]={"Zmm2jets_Min_N_TChannel","Zmumu_MV70_140_BFil","Zmumu_MV70_140_CFilBVet","Zmumu_MV70_140_CVetBVet","Zmumu_MV140_280_BFil",
			"Zmumu_MV140_280_CFilBVet","Zmumu_MV140_280_CVetBVet"};
	AddStack("eta_mumu","lep_eta",files);

	gROOT->SetBatch(kFALSE);
	

	cout << "Stacks made!" << endl;
	
	
	
}
